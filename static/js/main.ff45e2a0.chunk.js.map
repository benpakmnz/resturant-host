{"version":3,"sources":["components/Table/Table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Table","props","useState","seconds","setSeconds","isShowInfo","setShowInfo","useEffect","clearTable","tableData","interval","Order","setInterval","clearInterval","Fragment","className","disabled","onClick","Diners","Typography","align","variant","Modal","open","onClose","List","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","Mobile","start_time","App","tableList","setTableList","ordersList","setOrdersList","completedOrders","setCompletedOrders","alertType","setAlertType","alertText","setAlertText","require","writeServedOrders","tableId","tempTableList","tableIndex","findIndex","table","end_time","moment","Date","format","console","log","Box","sx","display","CssBaseline","AppBar","position","zIndex","theme","drawer","Toolbar","flexGrow","Button","color","startIcon","length","find","tempOrderList","forEach","order","index","splice","Stack","width","spacing","Alert","severity","Drawer","flexShrink","boxSizing","overflow","subheader","ListSubheader","map","orderItem","ListItemButton","Divider","mt","component","p","tableItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff45e2a0.chunk.js","sourcesContent":["import {\r\n  Avatar,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Modal,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PhoneAndroidIcon from \"@mui/icons-material/PhoneAndroid\";\r\nimport PeopleIcon from \"@mui/icons-material/People\";\r\nimport AccessTimeFilledIcon from \"@mui/icons-material/AccessTimeFilled\";\r\nimport RestaurantIcon from \"@mui/icons-material/Restaurant\";\r\nimport { tableInterface } from \"../../App\";\r\nimport \"./table.scss\";\r\n\r\nconst Table: React.FC<{\r\n  tableData: tableInterface;\r\n  clearTable: (tableId: number) => void;\r\n}> = (props) => {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [isShowInfo, setShowInfo] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (seconds > 90) {\r\n      props.clearTable(props.tableData.Table);\r\n    }\r\n    let interval: any = null;\r\n\r\n    if (props.tableData.Order) {\r\n      //setting interval to check the time passed\r\n      // only for table that gets an order\r\n\r\n      interval = setInterval(() => {\r\n        setSeconds((seconds) => seconds + 1);\r\n      }, 1000);\r\n    } else if (!props.tableData.Order && seconds !== 0) {\r\n      clearInterval(interval);\r\n      setSeconds(0);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [props, seconds]);\r\n\r\n  // table shape based on diners amount\r\n  const tableType = () => {\r\n    if (props.tableData.Diners === 1) {\r\n      return \"circle\";\r\n    } else if (props.tableData.Diners === 2) {\r\n      return \"wide_circle\";\r\n    } else if (props.tableData.Diners === 3) {\r\n      return \"triangle-up\";\r\n    } else if (props.tableData.Diners === 4) {\r\n      return \"square\";\r\n    } else if (props.tableData.Diners >= 5) {\r\n      return \"pentagon\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <li className=\"table_container\">\r\n        <button\r\n          className=\"table_btn\"\r\n          disabled={!props.tableData.Order}\r\n          onClick={() => setShowInfo(true)}\r\n        >\r\n          <span\r\n            className={`table_shape ${tableType()} ${\r\n              // handeling color of table based on interval value\r\n              seconds === 0\r\n                ? \" clear\"\r\n                : seconds < 60\r\n                ? \" accupied\"\r\n                : \" almost-done\"\r\n            }`}\r\n          ></span>\r\n          {props.tableData.Order && <RestaurantIcon className=\"tabled_order\" />}\r\n        </button>\r\n        <Typography align=\"center\" variant=\"caption\">\r\n          Table number: {props.tableData.Table}\r\n        </Typography>\r\n      </li>\r\n\r\n      <Modal open={isShowInfo} onClose={() => setShowInfo(false)}>\r\n        <div className=\"info_modal\">\r\n          <Typography variant=\"h6\" align=\"center\">\r\n            Table number: {props.tableData.Table}, now Serves:\r\n          </Typography>\r\n          {props.tableData.Order ? (\r\n            <List>\r\n              <ListItem>\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    <PhoneAndroidIcon />\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary=\"Order number\"\r\n                  secondary={props.tableData.Order?.Mobile}\r\n                />\r\n              </ListItem>\r\n              <ListItem>\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    <PeopleIcon />\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary=\"Amount of pepole:\"\r\n                  secondary={props.tableData?.Order!.Diners}\r\n                />\r\n              </ListItem>\r\n              <ListItem>\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    <AccessTimeFilledIcon />\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary=\"Started at\"\r\n                  secondary={props.tableData.Order?.start_time}\r\n                />\r\n              </ListItem>\r\n            </List>\r\n          ) : (\r\n            // handle case when table gets cleared while info modal is open\r\n            <Typography variant=\"body2\" align=\"center\">\r\n              Nobody, its avaliable to get new orders\r\n            </Typography>\r\n          )}\r\n        </div>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Table from \"./components/Table/Table\";\nimport moment from \"moment\";\nimport {\n  Alert,\n  AppBar,\n  Avatar,\n  Box,\n  Button,\n  CssBaseline,\n  Drawer,\n  List,\n  ListItemAvatar,\n  ListItemText,\n  ListSubheader,\n  Stack,\n  Toolbar,\n  Typography,\n} from \"@mui/material\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport RestaurantIcon from \"@mui/icons-material/Restaurant\";\nimport Divider from \"@mui/material/Divider\";\nimport { AlertColor } from \"@mui/material/Alert/Alert.d\";\n\nexport interface tableInterface {\n  Concat: number[];\n  Diners: number;\n  Table: number;\n  Order?: orderInterface;\n}\n\nexport interface orderInterface {\n  Diners: number;\n  Mobile: string;\n  start_time?: string;\n  end_time?: string;\n  Table?: number[];\n}\n\nconst drawerWidth = 350;\n\nconst App: React.FC = () => {\n  const [tableList, setTableList] = useState<tableInterface[]>([]);\n  const [ordersList, setOrdersList] = useState<orderInterface[]>([]);\n  const [completedOrders, setCompletedOrders] = useState<orderInterface[]>([]);\n  const [alertType, setAlertType] = useState<AlertColor | undefined>(\"error\");\n  const [alertText, setAlertText] = useState<string>(\"\");\n\n  useEffect(() => {\n    setTableList(require(\"./utilitis/floor.json\"));\n    setOrdersList(require(\"./utilitis/orders.json\"));\n  }, []);\n\n  const serveWaitingList = () => {\n    if (ordersList.length > 0) {\n      //check for free table\n      if (tableList.find((table) => !table.Order)) {\n        let tempTableList = [...tableList];\n        let tempOrderList = [...ordersList];\n\n        // find fit table\n        tempTableList.forEach((table: tableInterface) => {\n          tempOrderList.forEach((order: orderInterface, index: number) => {\n            if (order.Diners === table.Diners && !table.Order) {\n              // setting the order into the table and setting start time stamp\n              table.Order = order;\n              table.Order.start_time = moment(new Date()).format(\n                \"DD/MM/YYYY, HH:mm\"\n              );\n\n              // removing order from orderlist\n              tempOrderList.splice(index, 1);\n            }\n          });\n        });\n        setTableList(tempTableList);\n        setOrdersList(tempOrderList);\n      } else {\n        setAlertType(\"error\");\n        setAlertText(\"there are no avivalble tables for serving\");\n      }\n    } else {\n      setAlertType(\"warning\");\n      setAlertText(\"There are no waiting orders\");\n    }\n  };\n\n  const writeServedOrders = (tableId: number) => {\n    let tempTableList = [...tableList];\n\n    // finding table index in the table list\n    let tableIndex = tempTableList.findIndex(\n      (table) => table.Table === tableId\n    );\n\n    // setting end time stamp\n    tempTableList[tableIndex].Order!.end_time = moment(new Date()).format(\n      \"DD/MM/YYYY, HH:mm\"\n    );\n\n    // setting up table id into the completed order\n    tempTableList[tableIndex].Order!.Table = [tempTableList[tableIndex].Table];\n    setCompletedOrders([...completedOrders, tempTableList[tableIndex].Order!]);\n\n    // removing order from table item\n    delete tempTableList[tableIndex].Order;\n    console.log(completedOrders);\n  };\n\n  return (\n    <>\n      <Box sx={{ display: \"flex\" }}>\n        <CssBaseline />\n        <AppBar\n          position=\"fixed\"\n          sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        >\n          <Toolbar>\n            <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\n              Resturant Host Planner\n            </Typography>\n            <Button\n              variant=\"outlined\"\n              color=\"inherit\"\n              startIcon={<RestaurantIcon />}\n              onClick={serveWaitingList}\n            >\n              Serve waiting list\n            </Button>\n          </Toolbar>\n          {alertText !== \"\" && (\n            <Stack sx={{ width: \"100%\" }} spacing={2}>\n              <Alert onClose={() => setAlertText(\"\")} severity={alertType}>\n                {alertText}\n              </Alert>\n            </Stack>\n          )}\n        </AppBar>\n        <Drawer\n          variant=\"permanent\"\n          sx={{\n            width: drawerWidth,\n            flexShrink: 0,\n            [`& .MuiDrawer-paper`]: {\n              width: drawerWidth,\n              boxSizing: \"border-box\",\n            },\n          }}\n        >\n          <Toolbar />\n          <Box sx={{ overflow: \"auto\" }}>\n            {ordersList.length > 0 ? (\n              <List\n                subheader={\n                  <ListSubheader>Orders wating for service</ListSubheader>\n                }\n              >\n                {ordersList.map((orderItem: orderInterface, index) => (\n                  <React.Fragment key={index}>\n                    <ListItemButton>\n                      <ListItemAvatar>\n                        <Avatar />\n                      </ListItemAvatar>\n                      <ListItemText\n                        primary={`Amount of guests: ${orderItem.Diners}`}\n                        secondary={`Contact number: ${orderItem.Mobile}`}\n                      />\n                    </ListItemButton>\n                    <Divider variant=\"inset\" />\n                  </React.Fragment>\n                ))}\n              </List>\n            ) : (\n              <Typography align=\"center\" sx={{ mt: 20 }}>\n                There are no waiting orders\n              </Typography>\n            )}\n          </Box>\n        </Drawer>\n        <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n          <Toolbar />\n          <ul className=\"tables_list\">\n            {tableList.map((tableItem: tableInterface) => (\n              <Table\n                tableData={tableItem}\n                clearTable={writeServedOrders}\n                key={tableItem.Table}\n              />\n            ))}\n          </ul>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}